<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.datamodel">Data model</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.datamodel.geometries">Geometries</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Geometries</h2>
	<p>SurrealDB makes working with GeoJSON easy, with support for <code>Point</code>, <code>Line</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLine</code>, <code>MultiPolygon</code>, and <code>Collection</code> values. SurrealQL automatically detects GeoJSON objects converting them into a single data type.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Type</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#point">
						<code>Point</code>
					</a>
				</td>
				<td>A geolocation point with latitude and longitude</td>
			</tr>
			<tr>
				<td>
					<a href="#line">
						<code>Line</code>
					</a>
				</td>
				<td>A GeoJSON LineString value for storing a geometric path</td>
			</tr>
			<tr>
				<td>
					<a href="#polygon">
						<code>Polygon</code>
					</a>
				</td>
				<td>A GeoJSON Polygon value for storing a geometric area</td>
			</tr>
			<tr>
				<td>
					<a href="#multipoint">
						<code>MultiPoint</code>
					</a>
				</td>
				<td>A value which contains multiple geometry points</td>
			</tr>
			<tr>
				<td>
					<a href="#multiline">
						<code>MultiLine</code>
					</a>
				</td>
				<td>A value which contains multiple geometry lines</td>
			</tr>
			<tr>
				<td>
					<a href="#multipolygon">
						<code>MultiPolygon</code>
					</a>
				</td>
				<td>A value which contains multiple geometry polygons</td>
			</tr>
			<tr>
				<td>
					<a href="#collection">
						<code>Collection</code>
					</a>
				</td>
				<td>A value which contains multiple different geometry types</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "point"}}>

	<Layout::Text text-l text-f>
		<h3>Point</h3>
		<p>The simplest form of GeoJSON that SurrealDB supports is a geolocation point. These can be written using two different formats. The first format is a simple 2-element tuple <code>(longitude, latitude)</code>.</p>
		<Code @name="docs-datamodel-geometries-point-1.sql">
			UPDATE city:london SET centre = (-0.118092, 51.509865);
		</Code>
		<p>In addition, SurrealDB supports entering GeoJSON points using the traditional format.</p>
		<blockquote yellow text="Info">No other properties must be present in the Point object.</blockquote>
		<Code @name="docs-datamodel-geometries-point-2.sql">
			UPDATE city:london SET centre = {
			    type: "Point",
			    coordinates: [-0.118092, 51.509865],
			};
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "line"}}>

	<Layout::Text text-l text-f>
		<h3>Line</h3>
		<p>A GeoJSON LineString value for storing a geometric path.</p>
		<blockquote yellow text="Info">No other properties must be present in the LineString object.</blockquote>
		<Code @name="docs-datamodel-geometries-line.sql">
			CREATE journey SET route = {
				type: "LineString",
				coordinates: [
					[10.0, 11.2], [10.5, 11.9]
				]
			};
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "polygon"}}>

	<Layout::Text text-l text-f>
		<h3>Polygon</h3>
		<p>A GeoJSON Polygon value for storing a geometric area.</p>
		<blockquote yellow text="Info">No other properties must be present in the Polygon object.</blockquote>
		<Code @name="docs-datamodel-geometries-polygon.sql">
			UPDATE city:london SET boundary = {
				type: "Polygon",
				coordinates: [[
					[-0.38314819, 51.37692386], [0.1785278, 51.37692386],
					[0.1785278, 51.61460570], [-0.38314819, 51.61460570],
					[-0.38314819, 51.37692386]
				]]
			};
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "multipoint"}}>

	<Layout::Text text-l text-f>
		<h3>MultiPoint</h3>
		<p>MultiPoints can be used to store multiple geometry points in a single value.</p>
		<blockquote yellow text="Info">No other properties must be present in the MultiPoint object.</blockquote>
		<Code @name="docs-datamodel-geometries-multipoint.sql">
			UPDATE person:tobie SET locations = {
				type: "MultiPoint",
				coordinates: [
					[10.0, 11.2],
					[10.5, 11.9]
				],
			};
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "multiline"}}>

	<Layout::Text text-l text-f>
		<h3>MultiLine</h3>
		<p>MultiLines can be used to store multiple geometry lines in a single value.</p>
		<blockquote yellow text="Info">No other properties must be present in the MultiLine object.</blockquote>
		<Code @name="docs-datamodel-geometries-multiline.sql">
			UPDATE travel:yellowstone SET routes = {
				type: "MultiLinestring",
				coordinates: [
					[ [10.0, 11.2], [10.5, 11.9] ],
					[ [11.0, 12.2], [11.5, 12.9], [12.0, 13.0] ]
				]
			};
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "multipolygon"}}>

	<Layout::Text text-l text-f>
		<h3>MultiPolygon</h3>
		<p>MultiPolygons can be used to store multiple geometry polygons in a single value.</p>
		<blockquote yellow text="Info">No other properties must be present in the MultiPolygon object.</blockquote>
		<Code @name="docs-datamodel-geometries-multipolygon.sql">
			UPDATE university:oxford SET locations = {
				type: "MultiPolygon",
				coordinates: [
					[
						[ [10.0, 11.2], [10.5, 11.9], [10.8, 12.0], [10.0, 11.2] ]
					],
					[
						[ [9.0, 11.2], [10.5, 11.9], [10.3, 13.0], [9.0, 11.2] ]
					]
				]
			};
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "collection"}}>

	<Layout::Text text-l text-f>
		<h3>Collection</h3>
		<p>Collections can be used to store multiple different geometry types in a single value.</p>
		<blockquote yellow text="Info">No other properties must be present in the Collection object.</blockquote>
		<Code @name="docs-datamodel-geometries-collection.sql">
			UPDATE university:oxford SET buildings = {
				type: "GeometryCollection",
				geometries: [
					{
						type: "MultiPoint",
						coordinates: [
							[10.0, 11.2],
							[10.5, 11.9]
						],
					},
					{
						type: "Polygon",
						coordinates: [[
							[-0.38314819, 51.37692386], [0.1785278, 51.37692386],
							[0.1785278, 51.61460570], [-0.38314819, 51.61460570],
							[-0.38314819, 51.37692386]
						]]
					},
					{
						type: "MultiPolygon",
						coordinates: [
							[
								[ [10.0, 11.2], [10.5, 11.9], [10.8, 12.0], [10.0, 11.2] ]
							],
							[
								[ [9.0, 11.2], [10.5, 11.9], [10.3, 13.0], [9.0, 11.2] ]
							]
						]
					}
				]
			};
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Text text-l text-f>
	<h3>Next steps</h3>
	<p>You've now seen how to use geometries to store locations, paths, and polygonal areas in SurrealDB. For more advanced functionality, take a look at the <Link @link="docs.surrealql.operators">operators</Link> and <Link @link="docs.surrealql.functions.geo">geo</Link> functions, which enable area, distance, and bearing geometric calculations, and the ability to detect whether geometries contain or intersect other geometry types.</p>
</Layout::Text>

<Layout::Gap large />