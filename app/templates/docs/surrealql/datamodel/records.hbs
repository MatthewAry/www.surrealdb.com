<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.datamodel">Data model</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.datamodel.records">Record links</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Record links</h2>
	<p>One of the most powerful features of SurrealDB is the ability to traverse from record-to-record without the need for traditional SQL JOINs. Each record ID points directly to a specific record in the database, without needing to run a table scan query. Record IDs can be stored within other records, allowing them to be linked together.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Creating a record</h3>
	<p>When you create a record without specifying the id, then a randomly generated id is created and used for the record id.</p>
	<codes vertical>
		<Code @name="docs-datamodel-records-input-1.sql">
			CREATE person SET name = 'Tobie';
		</Code>
		<Code @name="docs-datamodel-records-result-1.txt">
			person:aio58g22n3upq16hsani
		</Code>
	</codes>
	<p>It's also possible to specify a specific record id when creating or updating records.</p>
	<codes vertical>
		<Code @name="docs-datamodel-records-input-2.sql">
			CREATE person:tester SET name = 'Tobie';
		</Code>
		<Code @name="docs-datamodel-records-result-2.txt">
			person:tester
		</Code>
	</codes>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Storing record links within records</h3>
	<p>Records ids can be stored directly within other records, either as top-level properties, or nested within objects or arrays.</p>
	<Code @name="docs-datamodel-records-input-3.sql">
		CREATE person:jaime SET name = 'Jaime', friends = [person:tobie, person:simon];
		CREATE person:tobie SET name = 'Tobie', friends = [person:simon, person:marcus];
		CREATE person:simon SET name = 'Simon', friends = [person:jaime, person:tobie];
		CREATE person:marcus SET name = 'Marcus', friends = [person:tobie];
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Fetching remote records from within records</h3>
	<p>Records ids can be stored directly within other records, either as top-level properties, or nested within objects or arrays. Nested field traversal can be used to fetch the properties from the remote records, as if the record was embedded within the record being queried.</p>
	<codes vertical>
		<Code @name="docs-datamodel-records-input-4.sql">
			SELECT friends.name FROM person:tobie;
		</Code>
		<Code @name="docs-datamodel-records-input-4.json">
			[
				{
					friends: {
						name: ["Simon", "Marcus"]
					}
				}
			]
		</Code>
	</codes>
	<p>There is no limit to the number of remote traversals that can be performed in a query. Using <code>.</code> dot notation, SurrealDB does not differentiate between nested object properties, or remote records, and will fetch remote records asynchronously when needed for a query.</p>
	<codes vertical>
		<Code @name="docs-datamodel-records-input-5.sql">
			SELECT friends.friends.friends.name FROM person:tobie;
		</Code>
		<Code @name="docs-datamodel-records-input-5.json">
			[
				{
					friends: {
						friends: {
							friends: {
								name: [
									[ ["Tobie", "Simon"], ["Simon", "Marcus"] ],
									[ ["Simon", "Marcus"] ]
								]
							}
						}
					}
				}
			]
		</Code>
	</codes>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Next steps</h3>
	<p>You've now seen how to create records using randomly generated ids, or specific record ids. This is just the beginning! The power and flexibility which is possible with the remote record fetching functionality within queries opens up a whole new set of possibilities for storing and querying traditional data, and connected datasets. Take a look at the next chapter to understand how futures can be used to dynamically compute values only when retrieved.</p>
</Layout::Text>

<Layout::Gap large />