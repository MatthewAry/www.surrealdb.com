<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions">Functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.array">Array functions</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Array functions</h2>
	<p>These functions can be used when working with, and manipulating arrays of data.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
            <tr>
				<td>
					<a href="#combine">
						<code>array::combine()</code>
					</a>
				</td>
				<td>Combines all values from two arrays together</td>
			</tr>
            <tr>
				<td>
					<a href="#concat">
						<code>array::concat()</code>
					</a>
				</td>
                <td>Returns the merged values from two arrays</td>
			</tr>
			<tr>
				<td>
					<a href="#difference">
						<code>array::difference()</code>
					</a>
				</td>
				<td>Returns the difference between two arrays</td>
			</tr>
			<tr>
				<td>
					<a href="#distinct">
						<code>array::distinct()</code>
					</a>
				</td>
				<td>Returns the unique items in an array</td>
			</tr>
			<tr>
				<td>
					<a href="#intersect">
						<code>array::intersect()</code>
					</a>
				</td>
				<td>Returns the values which intersect two arrays</td>
			</tr>
			<tr>
				<td>
					<a href="#len">
						<code>array::len()</code>
					</a>
				</td>
				<td>Returns the length of an array</td>
			</tr>
			<tr>
				<td>
					<a href="#sort">
						<code>array::sort()</code>
					</a>
				</td>
				<td>Sorts the values in an array in ascending or descending order</td>
			</tr>
			<tr>
				<td>
					<a href="#sort-asc">
						<code>array::sort::asc()</code>
					</a>
				</td>
				<td>Sorts the values in an array in ascending order</td>
			</tr>
			<tr>
				<td>
					<a href="#sort-desc">
						<code>array::sort::desc()</code>
					</a>
				</td>
				<td>Sorts the values in an array in descending order</td>
			</tr>
			<tr>
				<td>
					<a href="#union">
						<code>array::union()</code>
					</a>
				</td>
				<td>Returns the unique merged values from two arrays</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "combine"}}>

	<Layout::Text text-l text-f>
		<h3>array::combine</h3>
		<p>The <code>array::combine</code> function combines all values from two arrays together, returning an array of arrays.</p>
		<Code @name="docs-surrealql-functions-array-combine.sql" text="API Definition">
			array::combine(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-combine-input.sql">
				SELECT * FROM array::combine([1,2], [2,3]);
			</Code>
			<Code @name="docs-surrealql-functions-array-combine-result.txt">
				[ [1,2], [1,3], [2,3] ]
			</Code>
		</codes>
		<p>If either of the two arguments do not evaluate to an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-combine-error-input.sql">
				SELECT * FROM array::combine(3, true);
			</Code>
			<Code @name="docs-surrealql-functions-array-combine-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "concat"}}>

	<Layout::Text text-l text-f>
		<h3>array::concat</h3>
		<p>The <code>array::concat</code> function merges two arrays together, returning an array which may contain duplicate values. If you want to remove duplicate values from the resulting array, then use the <Link @link="#union"><code>array::union()</code></Link> function</p>
		<Code @name="docs-surrealql-functions-array-concat.sql" text="API Definition">
			array::concat(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-concat-input.sql">
                SELECT * FROM array::concat([1,2,3,4], [3,4,5,6]);
			</Code>
			<Code @name="docs-surrealql-functions-array-concat-result.txt">
				[1,2,3,4,3,4,5,6]
			</Code>
		</codes>
		<p>If either of the two arguments do not evaluate to an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-concat-error-input.sql">
				SELECT * FROM array::concat(3, true);
			</Code>
			<Code @name="docs-surrealql-functions-array-concat-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "difference"}}>

	<Layout::Text text-l text-f>
		<h3>array::difference</h3>
		<p>The <code>array::difference</code> determines the difference between two arrays, returning a single array containing items which are not in both arrays.</p>
		<Code @name="docs-surrealql-functions-array-difference.sql" text="API Definition">
			array::difference(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-difference-input.sql">
				SELECT * FROM array::difference([1,2,3,4], [3,4,5,6]);
			</Code>
			<Code @name="docs-surrealql-functions-array-difference-result.txt">
				[1,2,5,6]
			</Code>
		</codes>
        <p>If either of the two arguments do not evaluate to an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-difference-error-input.sql">
				SELECT * FROM array::difference(3, true);
			</Code>
			<Code @name="docs-surrealql-functions-array-difference-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "distinct"}}>

	<Layout::Text text-l text-f>
		<h3>array::distinct</h3>
		<p>The <code>array::distinct</code> function calculates the unique values in an array, returning a single array.</p>
		<Code @name="docs-surrealql-functions-array-distinct.sql" text="API Definition">
			array::distinct(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-distinct-input.sql">
				SELECT * FROM array::distinct([1,2,1,3,3,4]);
			</Code>
			<Code @name="docs-surrealql-functions-array-distinct-result.txt">
				[1,2,3,4]
			</Code>
		</codes>
		<p>If the argument does not evaluate to an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-distinct-error-input.sql">
				SELECT * FROM array::distinct("some text");
			</Code>
			<Code @name="docs-surrealql-functions-array-distinct-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "intersect"}}>

	<Layout::Text text-l text-f>
		<h3>array::intersect</h3>
		<p>The <code>array::intersect</code> function calculates the values which intersect two arrays, returning a single array containing the values which are in both arrays.</p>
		<Code @name="docs-surrealql-functions-array-intersect.sql" text="API Definition">
			array::intersect(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-intersect-input.sql">
				SELECT * FROM array::intersect([1,2,3,4], [3,4,5,6]);
			</Code>
			<Code @name="docs-surrealql-functions-array-intersect-result.txt">
				[3,4]
			</Code>
		</codes>
        <p>If either of the two arguments do not evaluate to an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-intersect-error-input.sql">
				SELECT * FROM array::difference(3, true);
			</Code>
			<Code @name="docs-surrealql-functions-array-intersect-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "len"}}>

	<Layout::Text text-l text-f>
		<h3>array::len</h3>
		<p>The <code>array::len</code> function calculates the length of an array, returning a number. This function includes all items when counting the number of items in the array. If you want to only count truthy values, then use the <Link @link="docs.surrealql.functions.count"><code>count()</code></Link> function.</p>
		<Code @name="docs-surrealql-functions-array-len.sql" text="API Definition">
			array::len(array) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-len-input.sql">
				SELECT * FROM array::len([1,2,1,null,"something",3,3,4,0]);
			</Code>
			<Code @name="docs-surrealql-functions-array-len-result.txt">
				9
			</Code>
		</codes>
		<p>If the argument does not evaluate to an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-len-error-input.sql">
				SELECT * FROM array::len("some text");
			</Code>
			<Code @name="docs-surrealql-functions-array-len-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "sort"}}>

	<Layout::Text text-l text-f>
		<h3>array::sort</h3>
		<p>The <code>array::sort</code> function calculates the length of an array, returning a number. This function includes all items when counting the number of items in the array. If you want to only count truthy values, then use the <Link @link="docs.surrealql.functions.count"><code>count()</code></Link> function.</p>
		<Code @name="docs-surrealql-functions-array-sort-1.sql" text="API Definition">
			array::sort(array) -> array
		</Code>
		<p>The function also accepts a second <Link @link="docs.surrealql.datamodel.simple">boolean</Link> parameter which determines the sorting direction. The second parameter can be <Ascua::Prism::Inline @language="sql" @code="true" /> for ascending order, or <Ascua::Prism::Inline @language="sql" @code="false" /> for descending order.</p>
		<Code @name="docs-surrealql-functions-array-sort-2.sql" text="API Definition">
			count(array, bool) -> array
		</Code>
		<p>The function also accepts a second <Link @link="docs.surrealql.datamodel.simple">string</Link> parameter which determines the sorting direction. The second parameter can be <Ascua::Prism::Inline @language="sql" @code="'asc'" /> for ascending order, or <Ascua::Prism::Inline @language="sql" @code="'desc'" /> for descending order.</p>
		<Code @name="docs-surrealql-functions-array-sort-3.sql" text="API Definition">
			count(array, string) -> array
		</Code>
		<p>The following examples show this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-input-1.sql">
				SELECT * FROM array::sort([1,2,1,null,"something",3,3,4,0]);
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-result-1.txt">
				[null,0,1,1,2,3,3,4,"something"]
			</Code>
		</codes>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-input-2.sql">
				SELECT * FROM array::sort([1,2,1,null,"something",3,3,4,0], false);
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-result-2.txt">
				["something",4,3,3,2,1,1,9,null]
			</Code>
		</codes>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-input-3.sql">
				SELECT * FROM array::sort([1,2,1,null,"something",3,3,4,0], "asc");
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-result-3.txt">
				[null,0,1,1,2,3,3,4,"something"]
			</Code>
		</codes>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-input-4.sql">
				SELECT * FROM array::sort([1,2,1,null,"something",3,3,4,0], "desc");
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-result-4.txt">
				["something",4,3,3,2,1,1,9,null]
			</Code>
		</codes>
		<p>If the first argument does not evaluate to an array, then the value will be returned without modification:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-error-input.sql">
				SELECT * FROM array::sort("some text");
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-error-result.txt">
				"some text"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "sort-asc"}}>

	<Layout::Text text-l text-f>
		<h3>array::sort::asc</h3>
		<p>The <code>array::sort::asc</code> function is a shorthand convenience function for the <code>array::sort</code> function, to sort values in an array in ascending order.</p>
		<Code @name="docs-surrealql-functions-array-sort-asc.sql" text="API Definition">
			array::sort::asc(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-asc-input.sql">
				SELECT * FROM array::sort::asc([1,2,1,null,"something",3,3,4,0]);
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-asc-result.txt">
				[null,0,1,1,2,3,3,4,"something"]
			</Code>
		</codes>
		<p>If the argument does not evaluate to an array, then the value will be returned without modification:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-asc-error-input.sql">
				SELECT * FROM array::sort::asc("some text");
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-asc-error-result.txt">
				"some text"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "sort-desc"}}>

	<Layout::Text text-l text-f>
		<h3>array::sort::desc</h3>
		<p>The <code>array::sort::desc</code> function is a shorthand convenience function for the <code>array::sort</code> function, to sort values in an array in descending order.</p>
		<Code @name="docs-surrealql-functions-array-sort-desc.sql" text="API Definition">
			array::sort::desc(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-desc-input.sql">
				SELECT * FROM array::sort::desc([1,2,1,null,"something",3,3,4,0]);
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-desc-result.txt">
				["something",4,3,3,2,1,1,9,null]
			</Code>
		</codes>
		<p>If the argument does not evaluate to an array, then the value will be returned without modification:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-desc-error-input.sql">
				SELECT * FROM array::sort::desc("some text");
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-desc-error-result.txt">
				"some text"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "union"}}>

	<Layout::Text text-l text-f>
		<h3>array::union</h3>
		<p>The <code>array::union</code> function combines two arrays together, removing duplicate values, and returning a single array.</p>
		<Code @name="docs-surrealql-functions-array-union.sql" text="API Definition">
			array::union(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-union-input.sql">
				SELECT * FROM array::union([1,2,1,6], [1,3,4,5,6]);
			</Code>
			<Code @name="docs-surrealql-functions-array-union-result.txt">
				[1,2,6,3,4,5]
			</Code>
		</codes>
        <p>If either of the two arguments do not evaluate to an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-array-union-error-input.sql">
				SELECT * FROM array::union(3, true);
			</Code>
			<Code @name="docs-surrealql-functions-array-union-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />