<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions">Functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.math">Math functions</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Math functions</h2>
	<p>These functions can be used when analysing numeric data and numeric collections.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#abs">
						<code>math::abs()</code>
					</a>
				</td>
				<td>Returns the absolute value of a number</td>
			</tr>
			{{!-- <tr>
				<td>
					<a href="#bottom">
						<code>math::bottom()</code>
					</a>
				</td>
				<td>Returns the bottom X set of numbers in a set of numbers</td>
			</tr> --}}
			<tr>
				<td>
					<a href="#ceil">
						<code>math::ceil()</code>
					</a>
				</td>
				<td>Rounds a number up to the next largest integer</td>
			</tr>
			<tr>
				<td>
					<a href="#fixed">
						<code>math::fixed()</code>
					</a>
				</td>
				<td>Returns a number with the specified number of decimal places</td>
			</tr>
			<tr>
				<td>
					<a href="#floor">
						<code>math::floor()</code>
					</a>
				</td>
				<td>Rounds a number down to the next largest integer</td>
			</tr>
			{{!-- <tr>
				<td>
					<a href="#interquartile">
						<code>math::interquartile()</code>
					</a>
				</td>
				<td>Lorem ipsum dolor</td>
			</tr> --}}
			<tr>
				<td>
					<a href="#max">
						<code>math::max()</code>
					</a>
				</td>
				<td>Returns the maximum number in a set of numbers</td>
			</tr>
			<tr>
				<td>
					<a href="#mean">
						<code>math::mean()</code>
					</a>
				</td>
				<td>Returns the mean of a set of numbers</td>
			</tr>
			<tr>
				<td>
					<a href="#median">
						<code>math::median()</code>
					</a>
				</td>
				<td>Returns the median of a set of numbers</td>
			</tr>
			{{!-- <tr>
				<td>
					<a href="#midhinge">
						<code>math::midhinge()</code>
					</a>
				</td>
				<td>Returns the midhinge of a set of numbers</td>
			</tr> --}}
			<tr>
				<td>
					<a href="#min">
						<code>math::min()</code>
					</a>
				</td>
				<td>Returns the minimum number in a set of numbers</td>
			</tr>
			{{!-- <tr>
				<td>
					<a href="#mode">
						<code>math::mode()</code>
					</a>
				</td>
				<td>Returns the value that occurs most often in a set of numbers</td>
			</tr> --}}
			{{!-- <tr>
				<td>
					<a href="#nearestrank">
						<code>math::nearestrank()</code>
					</a>
				</td>
				<td>Lorem ipsum dolor</td>
			</tr> --}}
			{{!-- <tr>
				<td>
					<a href="#percentile">
						<code>math::percentile()</code>
					</a>
				</td>
				<td>Returns the value below which a percentage of data falls</td>
			</tr> --}}
			<tr>
				<td>
					<a href="#product">
						<code>math::product()</code>
					</a>
				</td>
				<td>Returns the product of a set of numbers</td>
			</tr>
			<tr>
				<td>
					<a href="#round">
						<code>math::round()</code>
					</a>
				</td>
				<td>Rounds a number up or down to the nearest integer</td>
			</tr>
			{{!-- <tr>
				<td>
					<a href="#spread">
						<code>math::spread()</code>
					</a>
				</td>
				<td>Lorem ipsum dolor</td>
			</tr> --}}
			<tr>
				<td>
					<a href="#sqrt">
						<code>math::sqrt()</code>
					</a>
				</td>
				<td>Returns the square root of a number</td>
			</tr>
			{{!-- <tr>
				<td>
					<a href="#stddev">
						<code>math::stddev()</code>
					</a>
				</td>
				<td>Calculates how far a set of numbers are away from the mean</td>
			</tr> --}}
			<tr>
				<td>
					<a href="#sum">
						<code>math::sum()</code>
					</a>
				</td>
				<td>Returns the total sum of a set of numbers</td>
			</tr>
			{{!-- <tr>
				<td>
					<a href="#top">
						<code>math::top()</code>
					</a>
				</td>
				<td>Returns the top X set of numbers in a set of numbers</td>
			</tr> --}}
			{{!-- <tr>
				<td>
					<a href="#trimean">
						<code>math::trimean()</code>
					</a>
				</td>
				<td>The weighted average of the median and the two quartiles</td>
			</tr> --}}
			{{!-- <tr>
				<td>
					<a href="#variance">
						<code>math::variance()</code>
					</a>
				</td>
				<td>Calculates how far a set of numbers are spread out from the mean</td>
			</tr> --}}
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "abs"}}>

	<Layout::Text text-l text-f>
		<h3>math::abs</h3>
		<p>The <code>math::abs</code> function returns the absolute value of a number.</p>
		<Code @name="docs-surrealql-functions-math-abs.sql" text="API Definition">
			math::abs(number) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-abs-input.sql">
				SELECT * FROM math::abs(13.746189);
			</Code>
			<Code @name="docs-surrealql-functions-math-abs-result.txt">
				13
			</Code>
		</codes>
		<p>If the argument is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-abs-cast-input.sql">
				SELECT * FROM math::abs("13.746189");
			</Code>
			<Code @name="docs-surrealql-functions-math-abs-cast-result.txt">
				13
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "ceil"}}>

	<Layout::Text text-l text-f>
		<h3>math::ceil</h3>
		<p>The <code>math::ceil</code> function rounds a number up to the next largest integer.</p>
		<Code @name="docs-surrealql-functions-math-ceil.sql" text="API Definition">
			math::ceil(number) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-ceil-input.sql">
				SELECT * FROM math::ceil(13.146572);
			</Code>
			<Code @name="docs-surrealql-functions-math-ceil-result.txt">
				14
			</Code>
		</codes>
		<p>If the argument is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-ceil-cast-input.sql">
				SELECT * FROM math::ceil("13.146572");
			</Code>
			<Code @name="docs-surrealql-functions-math-ceil-cast-result.txt">
				14
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "fixed"}}>

	<Layout::Text text-l text-f>
		<h3>math::fixed</h3>
		<p>The <code>math::fixed</code> function returns a number with the specified number of decimal places.</p>
		<Code @name="docs-surrealql-functions-math-fixed.sql" text="API Definition">
			math::fixed(number, number) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-fixed-input.sql">
				SELECT * FROM math::fixed(13.146572, 2);
			</Code>
			<Code @name="docs-surrealql-functions-math-fixed-result.txt">
				13.15
			</Code>
		</codes>
		<p>If the argument is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-fixed-cast-input.sql">
				SELECT * FROM math::fixed("13.146572", 2);
			</Code>
			<Code @name="docs-surrealql-functions-math-fixed-cast-result.txt">
				13.15
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "floor"}}>

	<Layout::Text text-l text-f>
		<h3>math::floor</h3>
		<p>The <code>math::floor</code> function rounds a number down to the next largest integer.</p>
		<Code @name="docs-surrealql-functions-math-floor.sql" text="API Definition">
			math::floor(number) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-floor-input.sql">
				SELECT * FROM math::floor(13.746189);
			</Code>
			<Code @name="docs-surrealql-functions-math-floor-result.txt">
				13
			</Code>
		</codes>
		<p>If the argument is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-floor-cast-input.sql">
				SELECT * FROM math::floor("13.746189");
			</Code>
			<Code @name="docs-surrealql-functions-math-floor-cast-result.txt">
				13
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "max"}}>

	<Layout::Text text-l text-f>
		<h3>math::max</h3>
		<p>The <code>math::max</code> function returns the maximum number in a set of numbers.</p>
		<Code @name="docs-surrealql-functions-math-max.sql" text="API Definition">
			math::max(number) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-max-input.sql">
				SELECT * FROM math::max([26.164, 13.746189, 23, 16.4, 41.42]);
			</Code>
			<Code @name="docs-surrealql-functions-math-max-result.txt">
				41.42
			</Code>
		</codes>
		<p>If any value in the array is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-max-cast-input.sql">
				SELECT * FROM math::max(["26.164", 13.746189, '23', 16.4, "41.42"]);
			</Code>
			<Code @name="docs-surrealql-functions-math-max-cast-result.txt">
				41.42
			</Code>
		</codes>
		<p>If the argument is not an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-max-error-input.sql">
				SELECT * FROM math::max("some invalid argument");
			</Code>
			<Code @name="docs-surrealql-functions-math-max-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "mean"}}>

	<Layout::Text text-l text-f>
		<h3>math::mean</h3>
		<p>The <code>math::mean</code> function returns the mean of a set of numbers.</p>
		<Code @name="docs-surrealql-functions-math-mean.sql" text="API Definition">
			math::mean(array) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-mean-input.sql">
				SELECT * FROM math::mean([26.164, 13.746189, 23, 16.4, 41.42]);
			</Code>
			<Code @name="docs-surrealql-functions-math-mean-result.txt">
				24.1460378
			</Code>
		</codes>
		<p>If any value in the array is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-mean-cast-input.sql">
				SELECT * FROM math::mean(["26.164", 13.746189, '23', 16.4, "41.42"]);
			</Code>
			<Code @name="docs-surrealql-functions-math-mean-cast-result.txt">
				24.1460378
			</Code>
		</codes>
		<p>If the argument is not an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-mean-error-input.sql">
				SELECT * FROM math::mean("some invalid argument");
			</Code>
			<Code @name="docs-surrealql-functions-math-mean-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "median"}}>

	<Layout::Text text-l text-f>
		<h3>math::median</h3>
		<p>The <code>math::median</code> function returns the median of a set of numbers.</p>
		<Code @name="docs-surrealql-functions-math-median.sql" text="API Definition">
			math::median(array) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-median-input.sql">
				SELECT * FROM math::median([26.164, 13.746189, 23, 16.4, 41.42]);
			</Code>
			<Code @name="docs-surrealql-functions-math-median-result.txt">
				23
			</Code>
		</codes>
		<p>If any value in the array is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-median-cast-input.sql">
				SELECT * FROM math::median(["26.164", 13.746189, '23', 16.4, "41.42"]);
			</Code>
			<Code @name="docs-surrealql-functions-math-median-cast-result.txt">
				23
			</Code>
		</codes>
		<p>If the argument is not an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-median-error-input.sql">
				SELECT * FROM math::median("some invalid argument");
			</Code>
			<Code @name="docs-surrealql-functions-math-median-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "min"}}>

	<Layout::Text text-l text-f>
		<h3>math::min</h3>
		<p>The <code>math::min</code> function returns the minimum number in a set of numbers.</p>
		<Code @name="docs-surrealql-functions-math-min.sql" text="API Definition">
			math::min(array) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-min-input.sql">
				SELECT * FROM math::min([26.164, 13.746189, 23, 16.4, 41.42]);
			</Code>
			<Code @name="docs-surrealql-functions-math-min-result.txt">
				13.746189
			</Code>
		</codes>
		<p>If any value in the array is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-min-cast-input.sql">
				SELECT * FROM math::min(["26.164", 13.746189, '23', 16.4, "41.42"]);
			</Code>
			<Code @name="docs-surrealql-functions-math-min-cast-result.txt">
				13.746189
			</Code>
		</codes>
		<p>If the argument is not an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-min-error-input.sql">
				SELECT * FROM math::min("some invalid argument");
			</Code>
			<Code @name="docs-surrealql-functions-math-min-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "product"}}>

	<Layout::Text text-l text-f>
		<h3>math::product</h3>
		<p>The <code>math::product</code> function returns the product of a set of numbers.</p>
		<Code @name="docs-surrealql-functions-math-product.sql" text="API Definition">
			math::product(array) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-product-input.sql">
				SELECT * FROM math::product([26.164, 13.746189, 23, 16.4, 41.42]);
			</Code>
			<Code @name="docs-surrealql-functions-math-product-result.txt">
				5619119.004884841504
			</Code>
		</codes>
		<p>If any value in the array is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-product-cast-input.sql">
				SELECT * FROM math::product(["26.164", 13.746189, '23', 16.4, "41.42"]);
			</Code>
			<Code @name="docs-surrealql-functions-math-product-cast-result.txt">
				5619119.004884841504
			</Code>
		</codes>
		<p>If the argument is not an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-product-error-input.sql">
				SELECT * FROM math::product("some invalid argument");
			</Code>
			<Code @name="docs-surrealql-functions-math-product-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "round"}}>

	<Layout::Text text-l text-f>
		<h3>math::round</h3>
		<p>The <code>math::round</code> function rounds a number up or down to the nearest integer.</p>
		<Code @name="docs-surrealql-functions-math-round.sql" text="API Definition">
			math::round(number) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-round-input.sql">
				SELECT * FROM math::round(13.53124);
			</Code>
			<Code @name="docs-surrealql-functions-math-round-result.txt">
				14
			</Code>
		</codes>
		<p>If the argument is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-round-cast-input.sql">
				SELECT * FROM math::round("13.53124");
			</Code>
			<Code @name="docs-surrealql-functions-math-round-cast-result.txt">
				14
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "sqrt"}}>

	<Layout::Text text-l text-f>
		<h3>math::sqrt</h3>
		<p>The <code>math::sqrt</code> function returns the square root of a number.</p>
		<Code @name="docs-surrealql-functions-math-sqrt.sql" text="API Definition">
			math::sqrt(number) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-sqrt-input.sql">
				SELECT * FROM math::sqrt(15);
			</Code>
			<Code @name="docs-surrealql-functions-math-sqrt-result.txt">
				3.872983346207417
			</Code>
		</codes>
		<p>If the argument is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-sqrt-cast-input.sql">
				SELECT * FROM math::sqrt("15");
			</Code>
			<Code @name="docs-surrealql-functions-math-sqrt-cast-result.txt">
				3.872983346207417
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "sum"}}>

	<Layout::Text text-l text-f>
		<h3>math::sum</h3>
		<p>The <code>math::sum</code> function returns the total sum of a set of numbers.</p>
		<Code @name="docs-surrealql-functions-math-sum.sql" text="API Definition">
			math::sum(array) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-sum-input.sql">
				SELECT * FROM math::sum([26.164, 13.746189, 23, 16.4, 41.42]);
			</Code>
			<Code @name="docs-surrealql-functions-math-sum-result.txt">
				120.730189
			</Code>
		</codes>
		<p>If any value in the array is not a number, then it will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a number before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-math-sum-cast-input.sql">
				SELECT * FROM math::sum(["26.164", 13.746189, '23', 16.4, "41.42"]);
			</Code>
			<Code @name="docs-surrealql-functions-math-sum-cast-result.txt">
				120.730189
			</Code>
		</codes>
		<p>If the argument is not an array, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-math-sum-error-input.sql">
				SELECT * FROM math::sum("some invalid argument");
			</Code>
			<Code @name="docs-surrealql-functions-math-sum-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />