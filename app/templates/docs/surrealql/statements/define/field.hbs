<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements">Statements</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements.define"><code>DEFINE</code> statement</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements.define.field"><code>FIELD</code></Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
	<h2><code>DEFINE FIELD</code> statement</h2>
	<p>
		The <code>DEFINE FIELD</code> statement allows you to instantiate a named field on a table, enabling you to set
		the field's data type, set a default value, apply assertions to protect data consistency, and set permissions
		specifying what operations can be performed on the field.
	</p>
	<Docs::Heading @level="4">Requirements</Docs::Heading>
	<ul>
		<li>You must be authenticated as a root, namespace, or database user before you can use the <code>DEFINE FIELD</code> statement.</li>
		<li><LinkTo @route="docs.surrealql.statements.use">You must select your namespace and database</LinkTo> before you can use the <code>DEFINE FIELD</code> statement.</li>
	</ul>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<Docs::Heading @level="4">Statement syntax</Docs::Heading>
	<Code @name="docs/surrealql/statements/define/field/syntax.typescript" text="SurQL Syntax" />
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
    <Docs::Heading @level="3">Example usage</Docs::Heading>
	<p>The following expression shows the simplest way to use the <code>DEFINE FIELD</code> statement.</p>
	<Code @name="docs/surrealql/statements/define/field/name-field.surql" />

	<Docs::Heading @level="4">Defining data types</Docs::Heading>
	<p>Note: A list of supported data types can be found at the bottom of this page.</p>
	<Docs::Heading @level="5">Simple data types</Docs::Heading>
	<Code @name="docs/surrealql/statements/define/field/type-field.surql" />

	<Docs::Heading @level="5">Flexible data types</Docs::Heading>
	<p>
		Flexible types allow you to have <code>SCHEMALESS</code> functionality on a <code>SCHEMAFULL</code> table.
		This is especially useful for working with nested objects.
	</p>
	<Code @name="docs/surrealql/statements/define/field/type-flexible.surql" />

	<Docs::Heading @level="5">Array data type</Docs::Heading>
	<Code @name="docs/surrealql/statements/define/field/array-type-field.surql" />

	<Docs::Heading @level="5">Array with allowed values</Docs::Heading>
	<p>By using an Access Control List as an example we can show how we can restrict what values can be stored in an array.</p>
	<Code @name="docs/surrealql/statements/define/field/array-assert-field.surql" />

	<Docs::Heading @level="4">Making a field optional</Docs::Heading>
	<Code @name="docs/surrealql/statements/define/field/optional-field.surql" />

	<Docs::Heading @level="4">Setting a default value</Docs::Heading>
	<Code @name="docs/surrealql/statements/define/field/default-field.surql" />

	<Docs::Heading @level="4">Alter a passed value</Docs::Heading>
	<Code @name="docs/surrealql/statements/define/field/value-field.surql" />

	<Docs::Heading @level="4">Asserting rules on fields</Docs::Heading>
	<p>You can take your field definitions even further by using asserts. Assert is a powerful feature that can be used to ensure that your data remains consistent.</p>

	<Docs::Heading @level="5">Email is required</Docs::Heading>
	<Code @name="docs/surrealql/statements/define/field/email-assert-field.surql" />

	<Docs::Heading @level="5">Use regex to validate a string</Docs::Heading>
	<Code @name="docs/surrealql/statements/define/field/constraints-field.surql" />
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<Docs::Heading @level="3">Supported Data Types</Docs::Heading>
	<Docs::SurrealQl::Types />
</Layout::Text>

<Layout::Gap large />
