<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements">Statements</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements.select"><code>SELECT</code> statement</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2><code>SELECT</code> statement</h2>
	<p>The SELECT statement can be used for selecting and querying data in a database. Each SELECT statement supports selecting from multiple targets, which can include tables, records, edges, subqueries, paramaters, arrays, objects, and other values.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Statement syntax</h3>
	<Code @name="docs/surrealql/statements/select/syntax.typescript" text="SQL Syntax" />
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>

	<h3>Example usage</h3>

	<p>The following query shows example usage of this statement.</p>
	<Code @name="docs/surrealql/statements/select/simple.sql" />

	<p>SELECT queries support advanced expression in the field projections.</p>
	<Code @name="docs/surrealql/statements/select/expr.sql" />

	<p>SurrealDB supports selecting from multiple targets including tables, records, edges, parameters, subqueries, arrays, objects, values.</p>
	<Code @name="docs/surrealql/statements/select/from.sql" />

	<p>As with traditional SQL queries, the SurrealDB SELECT queries support conditional filtering using a <code>WHERE</code> clause. If the expression in the <code>WHERE</code> clause evaluates to true, then the respective record will be returned.</p>
	<Code @name="docs/surrealql/statements/select/where.sql" />

	<p>As SurrealDB supports arrays and nested fields within arrays, it is possible to split the result on a specific field name, returning each value in an array as a separate value, along with the record content itself. This is useful in data analysis contexts.</p>
	<Code @name="docs/surrealql/statements/select/split.sql" />

	<p>SurrealDB supports data aggregation and grouping, with support for multiple fields, nested fields, and aggregate functions. In SurrealDB, every field which appears in the field projections of the select statement (and which is not an aggregate function), must also be present in the <code>GROUP BY</code> clause.</p>
	<Code @name="docs/surrealql/statements/select/group.sql" />

	<p>To sort records, SurrealDB allows ordering on multiple fields and nested fields. Use the <code>ORDER BY</code> clause to specify a comma-separated list of field names which should be used to order the resulting records. The <code>ASC</code> and <code>DESC</code> keywords can be used to specify whether results should be sorted in an ascending or descending manner. The <code>COLLATE</code> keyword can be used to use unicode collation when ordering text in string values, ensuring that different cases, and different languages are sorted in a consistent manner. Finally the <code>NUMERIC</code> can be used to correctly sort text which contains numeric values.</p>
	<Code @name="docs/surrealql/statements/select/order.sql" />

	<p>To limit the number of records returned, use the <code>LIMIT</code> clause.</p>
	<Code @name="docs/surrealql/statements/select/limit.sql" />

	<p>When using the <code>LIMIT</code> clause, it is possible to paginate results by using the <code>START</code> clause to start from a specific record from the result set.</p>
	<Code @name="docs/surrealql/statements/select/start.sql" />

	<p>One of the most powerful functions in SurrealDB is the related records and graph connections. Instead of pulling data from multiple tables and merging that data together, SurrealDB allows you to traverse related records efficiently without needing to use JOINs. To fetch and replace records with the remote record data, use the <code>FETCH</code> clause to specify the fields and nested fields which should be fetched in-place, and returned in the final statement response output.</p>
	<Code @name="docs/surrealql/statements/select/fetch.sql" />

	<p>When processing a large result set with many interconnected records, it is possible to use the <code>TIMEOUT</code> keyword to specify a timeout duration for the statement. If the statement continues beyond this duration, then the transaction will fail, and the statement will return an error.</p>
	<Code @name="docs/surrealql/statements/select/timeout.sql" />

	<p>When processing a large result set with many interconnected records, it is possible to specify the <code>PARALLEL</code> keyword to signify that edges and remote records should be fetched and processed in parallel.</p>
	<Code @name="docs/surrealql/statements/select/parallel.sql" />

</Layout::Text>

<Layout::Gap large />